// Generated by CoffeeScript 1.6.3
(function() {
  var Bacon, init,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  init = function(Bacon) {
    var ajax, ajaxGet, cancelRequestAnimFrame, element, requestAnimFrame, scheduleFrame;
    Bacon.HTML = {};
    Bacon.HTML.ajax = ajax = function(_arg, abort) {
      var async, body, headers, method, password, url, user, withCredentials;
      method = _arg.method, url = _arg.url, async = _arg.async, body = _arg.body, user = _arg.user, password = _arg.password, headers = _arg.headers, withCredentials = _arg.withCredentials;
      if (abort == null) {
        abort = true;
      }
      return Bacon.fromBinder(function(handler) {
        var header, headerData, xhr;
        async = async === false ? false : true;
        if (method == null) {
          method = "GET";
        }
        if (headers == null) {
          headers = {};
        }
        if (body == null) {
          body = null;
        }
        xhr = new XMLHttpRequest();
        xhr.withCredentials = !!withCredentials;
        xhr.open(method, url, async, user, password, headers);
        for (header in headers) {
          if (!__hasProp.call(headers, header)) continue;
          headerData = headers[header];
          xhr.setRequestHeader(header, headerData);
        }
        Bacon.fromEventTarget(xhr, "readystatechange").map(".target").doAction(function(x) {
          return x.readyState = x.status > 0 ? 4 : 0;
        }).filter(function(x) {
          return x.readyState === 4 && x.status >= 200 && x.status < 300 || x.status === 304;
        }).take(1).assign(function(x) {
          handler(xhr);
          return xhr = null;
        });
        Bacon.fromEventTarget(xhr, "error").map(".target").take(1).assign(function(x) {
          handler(new Bacon.Error(xhr));
          return xhr = null;
        });
        xhr.send(body);
        return function() {
          if (xhr && abort) {
            xhr.abort();
            return xhr = null;
          }
        };
      }, function(value) {
        return [value, new Bacon.End()];
      });
    };
    Bacon.HTML.ajaxGet = ajaxGet = function(url, abort) {
      return ajax({
        url: url
      }, abort);
    };
    Bacon.HTML.ajaxPost = function(url, body, abort) {
      return ajax({
        url: url,
        body: body,
        method: "POST"
      }, abort);
    };
    Bacon.HTML.ajaxGetJSON = function(url, abort) {
      return ajaxGet(url, abort).map(function(xhr) {
        return JSON.parse(xhr.responseText);
      });
    };
    Bacon.HTML.lazyAjax = function(params, abort) {
      return Bacon.once(params).flatMap(function(x) {
        return ajax(x, abort);
      });
    };
    element = typeof HTMLElement !== "undefined" ? HTMLElement : Element;
    element.prototype.asEventStream = function(eventName, eventTransformer) {
      return Bacon.fromEventTarget(this, eventName, eventTransformer);
    };
    Bacon.HTML.fromOnEvent = function(target, eventName) {
      return Bacon.fromBinder(function(handler) {
        target[eventName] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return handler.apply(null, args);
        };
        return function() {
          return target[eventName] = null;
        };
      });
    };
    cancelRequestAnimFrame = (function() {
      return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;
    })();
    requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(cb) {
        return setTimeout(cb, 1000 / 60);
      };
    })();
    scheduleFrame = function(cb) {
      var animLoop, id;
      id = -1;
      animLoop = function(x) {
        cb(x);
        return id = requestAnimFrame(function() {
          return animLoop(id);
        });
      };
      return animLoop(id);
    };
    Bacon.HTML.animFrame = function() {
      return Bacon.fromBinder(function(handler) {
        var id;
        id = scheduleFrame(handler);
        return function() {
          return cancelRequestAnimFrame(id);
        };
      });
    };
    return Bacon.HTML;
  };

  if (typeof module !== "undefined" && module !== null) {
    Bacon = require("baconjs");
    module.exports = init(Bacon);
  } else {
    if (typeof define === "function" && define.amd) {
      define(["bacon"], init);
    } else {
      init(this.Bacon);
    }
  }

}).call(this);
